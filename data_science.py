# -*- coding: utf-8 -*-
"""Data Science.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13_r-bHd7zzMcrEwtNKQigb6ENTLkEBnj
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import numpy as np

sns.set(color_codes=True)
weather=pd.read_csv('Test.csv')
weather.head()

weather.info()


#LINE PLOT

plt.figure(figsize=(12, 5))
plt.plot(weather['date_time'], weather['temperature'], color='orange', linewidth=1)
plt.title('Temperature Over Time')
plt.xlabel('Date Time')
plt.ylabel('Temperature (Kelvin)')
plt.tight_layout()
plt.show()


#HISTOGRAM
plt.hist(weather['humidity'],color='lightpink')

#SCATTER PLOT[JOINTPLOT]
sns.jointplot(x='humidity',y='temperature',data=weather)

#HORIZONTAL BARGRAPH

pollution_by_weather = weather.groupby('weather_type')['air_pollution_index'].mean().sort_values(ascending=False)
plt.figure(figsize=(12, 6))
sns.barplot(x=pollution_by_weather.values, y=pollution_by_weather.index, palette='coolwarm')
plt.title('Average Air Pollution Index by Weather Type')
plt.xlabel('Average Air Pollution Index')
plt.ylabel('Weather Type')
plt.tight_layout()
plt.show()


# PLOT SHOWING CLIMATE CHANAGES OVER TIME
weather['date_time'] = pd.to_datetime(weather['date_time'], dayfirst=True)
weather['temperature_celsius'] = weather['temperature'] - 273.15
df_daily = weather.set_index('date_time').resample('D').mean(numeric_only=True)
plt.figure(figsize=(14, 6))
plt.plot(df_daily.index, df_daily['temperature_celsius'], label='Temperature (°C)', color='orange')
plt.plot(df_daily.index, df_daily['humidity'], label='Humidity (%)', color='blue')
plt.plot(df_daily.index, df_daily['air_pollution_index'], label='Air Pollution Index', color='green')
plt.title('Climate Indicators Over Time')
plt.xlabel('Date')
plt.ylabel('Value')
plt.legend()
plt.tight_layout()
plt.show()

#BARCHART
weather_counts = weather['weather_type'].value_counts()
plt.figure(figsize=(12, 6))
sns.barplot(x=weather_counts.index, y=weather_counts.values, palette='Set2')
plt.title('Frequency of Weather Types')
plt.xlabel('Weather Type')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()


#LINEAR REGRESSION MODEL


weather['date_time'] = pd.to_datetime(weather['date_time'], dayfirst=True)
weather['temperature_celsius'] = weather['temperature'] - 273.15
weather= weather.dropna(subset=['temperature_celsius'])
weather['date_ordinal'] = weather['date_time'].map(pd.Timestamp.toordinal)
X = weather['date_ordinal'].values.reshape(-1, 1)
y = weather['temperature_celsius'].values
model = LinearRegression()
model.fit(X, y)
weather['temp_trend'] = model.predict(X)
plt.figure(figsize=(14, 6))
plt.plot(weather['date_time'], weather['temperature_celsius'], label='Actual Temperature', color='lightblue', alpha=0.6)
plt.plot(weather['date_time'], weather['temp_trend'], label='Temperature Trend (Linear Regression)', color='orange', linewidth=2)
plt.title('Temperature Forecast with Linear Regression Trend')
plt.xlabel('Date')
plt.ylabel('Temperature (°C)')
plt.legend()
plt.tight_layout()
plt.show()